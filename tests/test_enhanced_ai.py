#!/usr/bin/env python3
"""
Test script for enhanced AI companion with dynamic communication style evolution
"""

import os
from ai_companion import AICompanion

def test_communication_evolution():
    """Test the AI's communication style evolution"""
    
    print("=== Testing Enhanced AI Companion ===")
    print("Testing dynamic internal thoughts and communication style evolution\n")
    
    try:
        # Initialize AI
        ai = AICompanion()
        print("‚úì AI Companion initialized successfully!")
        
        # Test scenarios to trigger communication style changes
        test_scenarios = [
            # Start formal, test casual response
            {
                'input': "Hey! What's up?",
                'expectation': "Should adapt to casual style"
            },
            
            # Test detailed explanation request
            {
                'input': "Can you explain consciousness in more detail?",
                'expectation': "Should become more verbose and philosophical"
            },
            
            # Test request for brevity
            {
                'input': "That was too long. Can you be more brief?",
                'expectation': "Should reduce verbosity"
            },
            
            # Test humor engagement
            {
                'input': "That's funny! Tell me a joke.",
                'expectation': "Should increase humor frequency"
            },
            
            # Test practical request
            {
                'input': "Just give me practical advice, no philosophy please.",
                'expectation': "Should reduce philosophical tendency"
            }
        ]
        
        print("\\n=== Communication Style Evolution Test ===")
        
        for i, scenario in enumerate(test_scenarios, 1):
            print(f"\\n--- Test {i}: {scenario['expectation']} ---")
            print(f"User: {scenario['input']}")
            
            # Get response
            response_data = ai.interact(scenario['input'])
            
            print(f"AI: {response_data['response'][:200]}{'...' if len(response_data['response']) > 200 else ''}")
            
            # Show internal thoughts (now dynamic!)
            if response_data.get('internal_monologue'):
                print(f"[Internal Thought: {response_data['internal_monologue'][:150]}{'...' if len(response_data['internal_monologue']) > 150 else ''}]")
            
            # Show personality/style updates
            if response_data.get('personality_updates'):
                print(f"[Evolution: {', '.join(response_data['personality_updates'])}]")
            
            print("-" * 50)
        
        # Test status and style summary
        print("\\n=== Final Communication Style State ===")
        status = ai.get_status()
        style_modifiers = ai.personality_engine.get_communication_style_modifiers()
        
        print(f"Formality Level: {style_modifiers['formality_level']:.2f}")
        print(f"Verbosity Level: {style_modifiers['verbosity_level']:.2f}")
        print(f"Humor Frequency: {style_modifiers['humor_frequency']:.2f}")
        print(f"Philosophical Tendency: {style_modifiers['philosophical_tendency']:.2f}")
        print(f"Successful Patterns: {style_modifiers['successful_patterns']}")
        print(f"Avoided Patterns: {style_modifiers['unsuccessful_patterns']}")
        
        # Test memory of style evolution
        print("\\n=== Memory of Style Changes ===")
        memories = ai.get_memory_summary(limit=20)
        for memory in memories['recent_memories']:
            if 'communication' in memory['content'].lower() or 'style' in memory['content'].lower():
                print(f"- {memory['content']} (importance: {memory['importance']:.2f})")
        
        print("\\n‚úì Enhanced AI testing completed successfully!")
        print("The AI now has:")
        print("  ‚úì Dynamic internal thoughts generated by AI reasoning")
        print("  ‚úì Evolving communication style based on user feedback")
        print("  ‚úì Memory of successful/unsuccessful communication patterns")
        print("  ‚úì Adaptive formality, verbosity, and philosophical tendency")
        
        # Shutdown
        ai.shutdown()
        
    except Exception as e:
        print(f"‚úó Error during testing: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

if __name__ == "__main__":
    success = test_communication_evolution()
    if success:
        print("\\nüéâ All tests passed! The AI companion now has true communication evolution.")
    else:
        print("\\n‚ùå Tests failed. Check the error messages above.")
